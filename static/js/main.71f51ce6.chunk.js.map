{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","toLocaleLowerCase","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qTAGaA,G,kBAAO,SAACC,GAAD,OAChB,sBAAKC,UAAY,iBAAjB,UACA,qBAAKC,IAAK,UAAUC,IAAG,+BAA4BH,EAAMI,QAAQC,GAA1C,4BACnB,mCAAOL,EAAMI,QAAQE,QACrB,8BAAIN,EAAMI,QAAQG,MAAlB,YCHKC,EAAW,SAAAR,GAAK,OAC5B,qBAAKC,UAAY,YAAjB,SACED,EAAMS,SAASC,KAAI,SAAAN,GAAO,OACrB,cAAC,EAAD,CAAyBA,QAAWA,GAAvBA,EAAQC,UCFhBM,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OAErB,uBACAZ,UAAY,SACZa,KAAO,SACNF,YAAeA,EACdG,SAAWF,MCwCFG,E,kDA5Cb,aAAc,IAAD,8BACX,gBAiBFH,aAAe,SAACI,GACd,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAhBtC,EAAKC,MAAQ,CACZb,SAAU,GACVU,YAAa,IALH,E,gEAYO,IAAD,OACjBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAG,EAAKT,SAAS,CAACT,SAAUkB,S,+BAOhC,IAAD,EAC4BC,KAAKN,MAA/Bb,EADF,EACEA,SAAUU,EADZ,EACYA,YACZU,EAAmBpB,EAASqB,QAAO,SAAA1B,GAAO,OAC9CA,EAAQE,KAAKyB,cAAcC,SAASb,EAAYc,wBAGlD,OACE,sBAAKhC,UAAU,MAAf,UACA,oDACG,cAAC,EAAD,CACAW,YAAc,kBACdC,aAAgBe,KAAKf,eAExB,cAAC,EAAD,CAAUJ,SAAYoB,W,GArCVK,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.71f51ce6.chunk.js","sourcesContent":["import React from 'react';\nimport './card.styles.css'\n\nexport const Card = (props) => (\n    <div className = 'card-container'>\n    <img alt ='monster' src = {`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} />\n        <h2> { props.monster.name}</h2>\n        <p>{props.monster.email} </p>\n    </div>\n);\n","import React from 'react';\nimport './card-list.styles.css'\nimport { Card } from '../card/card.component';\n\nexport const CardList = props => (\n <div className = 'card-list'>{\n   props.monsters.map(monster => (\n        <Card key = {monster.id} monster = {monster} />\n   ))}\n   </div>\n  );","import React from 'react';\n\nimport './search-box.style.css'\n\n\nexport const SearchBox = ({placeholder, handleChange}) => (\n\n    <input \n    className = 'search'\n    type = 'search'\n     placeholder = {placeholder}\n      onChange ={handleChange}\n\n      />\n\n)","import React, {Component } from 'react';\nimport './App.css';\nimport { CardList } from './components/card-list/card-list.component'\nimport { SearchBox } from './components/search-box/search-box.component'\n\nclass App extends Component{\n\n  constructor(){\n    super();\n\n    this.state = {\n     monsters: [],\n     searchField: ''\n    }\n\n\n    \n  }\n\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users =>this.setState({monsters: users}) )\n  }\n\n  handleChange = (e) =>{\n    this.setState({ searchField: e.target.value}\n      )\n  }\n  render(){\n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter(monster => \n      monster.name.toLowerCase().includes(searchField.toLocaleLowerCase())\n      );\n\n    return (\n      <div className=\"App\">\n      <h1> Monsters Rolodex </h1>\n         <SearchBox\n         placeholder = 'search monsters'\n         handleChange = {this.handleChange}\n         />\n      <CardList monsters = {filteredMonsters}>\n     \n      </CardList>\n    </div>\n    )\n\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}